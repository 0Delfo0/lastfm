using System.IO;
using System.Text;
using HtmlAgilityPack;
using IF.Lastfm.Core.Api.Commands;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;

namespace IF.Lastfm.ProgressReport
{
    /// <summary>
    /// Scrapes Last.fm/api for available methods, compares to what commands are in IF.Lastfm.Core and generates some Markdown.
    /// Maybe some images if I'm feeling adventurous
    /// </summary>
    public class Program
    {
        public const string API_INTRO_PAGE = "http://www.last.fm/api/intro";

        private const string _progressReportIntro = @"# Api Progress

These are all the Last.fm API methods currently available. 

- Methods implemented by the [Inflatable Last.fm .NET SDK](https://github.com/inflatablefriends/lastfm) link to the relevant documentation page.
- Methods ~~marked with strikethrough~~ aren't currently implemented. Pull requests are welcome!
- Methods _marked with an asterisk *_ aren't listed on [the Last.fm documentation](http://www.last.fm/api), so they might not work!

This list is generated by the [ProgressReport](https://github.com/inflatablefriends/lastfm/tree/master/src/IF.Lastfm.ProgressReport) tool in the solution. Last updated on {0}
";

        public static void Main(string[] args)
        {
            // scrape Last.fm API documentation
            var apiGroup = GetApiMethods();
            if (apiGroup == null)
            {
                return;
            }

            // reflect on Last.fm assembly to find all implemented commands
            var allImplemented = GetImplementedCommands().ToList();

            // generate the markdown
            WriteReport(apiGroup, allImplemented);

            // file is copied to the solution root by a post-build script.
        }

        #region Scrape

        /// <summary>
        /// Scrape the API documentation for all the method names
        /// </summary>
        private static Dictionary<string, IEnumerable<string>> GetApiMethods()
        {
            var client = new HttpClient();
            var response = client.GetAsync(API_INTRO_PAGE);
            response.Wait();

            if (!response.Result.IsSuccessStatusCode)
            {
                Console.WriteLine("Server returned {0} fetching {1}\n{2}", 
                    response.Result.StatusCode, API_INTRO_PAGE, response.Result.ReasonPhrase);
                Console.ReadLine();
                return null;
            }

            var html = response.Result.Content.ReadAsStringAsync();
            html.Wait();

            var doc = new HtmlDocument();
            doc.LoadHtml(html.Result);

            var wspanel = doc.DocumentNode.SelectNodes("//ul[@class='wspanel']").LastOrDefault();
            if (wspanel == null)
            {
                Console.WriteLine("Couldn't parse HTML");
                Console.ReadLine();
                return null;
            }

            // each package is a section of the API
            var packages = wspanel.Descendants().Where(li => HasClass(li, "package"));

            var allMethods = new Dictionary<string, IEnumerable<string>>();
            foreach (var package in packages)
            {
                var h3 = package.Element("h3");

                var ul = package.Element("ul");

                var methodLinks = ul.SelectNodes("child::li");
                var methods = methodLinks.Select(a => a.InnerText);

                allMethods.Add(h3.InnerText, methods);
            }

            return allMethods;
        }

        private static bool HasClass(HtmlNode stay, string classy)
        {
            return stay.Attributes.Contains("class") && stay.Attributes["class"].Value.Contains(classy);
        }

        #endregion

        #region Reflect
        
        /// <summary>
        /// With thanks to Tim Murphy
        /// http://stackoverflow.com/a/4529684/268555
        /// </summary>
        public static IEnumerable<Type> FindSubClassesOf(Type type)
        {
            var assembly = type.Assembly;
            return assembly.GetTypes().Where(t => t.IsSubclassOf(type));
        }

        /// <summary>
        /// Reflect on implemented commands
        /// </summary>
        private static IEnumerable<string> GetImplementedCommands()
        {
            var types = FindSubClassesOf(typeof(LastAsyncCommandBase)).Where(t => t.IsClass && !t.IsAbstract);
            var methods = types.Select(GetApiMethodFromCommandType);

            return methods;
        }

        private static string GetApiMethodFromCommandType(Type type)
        {
            var constructor = type.GetConstructors().First();
            var parameters = constructor.GetParameters();
            var arguments = new object[parameters.Count()]; // to keep reflection happy

            var instance = (LastAsyncCommandBase)Activator.CreateInstance(type, arguments);

            return instance.Method;
        }

        #endregion

        #region Report

        private static void WriteReport(Dictionary<string, IEnumerable<string>> apiGroup, List<string> allImplemented)
        {
            var markdownBuilder = new StringBuilder();
            markdownBuilder.AppendFormat(_progressReportIntro, DateTime.UtcNow.ToString("f"));

            foreach (var group in apiGroup.OrderBy(kv => kv.Key))
            {
                var apiGroupName = @group.Key;
                var implemented =
                    allImplemented.Where(m => m.StartsWith(apiGroupName.ToLowerInvariant(), StringComparison.Ordinal)).ToList();

                var matches = @group.Value.Intersect(implemented).ToList();
                var notImplemented = @group.Value.Except(implemented).ToList();
                var secret = implemented.Except(@group.Value).ToList();

                markdownBuilder.AppendFormat("## {0}\n\n", apiGroupName);
                foreach (var match in matches)
                {
                    markdownBuilder.AppendFormat("- [{0}](http://www.last.fm/api/show/{0})\n", match);
                }
                foreach (var match in notImplemented)
                {
                    markdownBuilder.AppendFormat("- ~~[{0}](http://www.last.fm/api/show/{0})~~\n", match);
                }
                foreach (var match in secret)
                {
                    markdownBuilder.AppendFormat("- _{0}_ *\n", match);
                }
                markdownBuilder.AppendLine();
            }

            var markdown = markdownBuilder.ToString();

            // write to output directory
            using (var fs = new FileStream("PROGRESS.md", FileMode.Create))
            {
                using (var sw = new StreamWriter(fs))
                {
                    sw.Write(markdown);
                }
            }
        }

        #endregion
    }
}
